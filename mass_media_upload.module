<?php
function mass_media_upload_menu() {
  $items['massupload'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_media_upload_upload_form'),
    'access callback' => TRUE,
  );
  
  $items['admin/config/media/mass_media_upload'] = array(
    'title' => t('Mass Media Upload Settings'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_media_upload_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  return $items;
}

function mass_media_upload_upload_form($form, &$form_state) {
  global $language;
  
  $nodetype = variable_get('mass_media_upload_nodetype','');
  $mediafield = variable_get('mass_media_upload_mediafield','');
  
  if (empty($nodetype) || empty($mediafield)) {
    drupal_set_message(t('You have not configured the Media Mass Upload Module. Go to the ' . l('configuration page', 'admin/config/media/mass_media_upload') . ' and fix this! As a result, this form is disabled.'));
    $disabled = TRUE;
  }else{
    $disabled = FALSE;
    $form['import_information'] = array(
      '#markup' => '<p>Nodetype used for generating the nodes: <strong>' . $nodetype . '</strong></p>'
                  .'<p>Mediafield used for uploading your media: <strong>' . $mediafield . '</strong></p>',
    );
  }
  
  $mediafield_info = field_info_instance('node', $mediafield, $nodetype);
  
  $form['upload'] = array(
    '#type' => 'plupload',
    '#title' => t('Mass Media Upload'),
    '#description' => t(''),
    '#required' => TRUE,
    '#disabled' => $disabled
  );
  
  if(isset($mediafield_info['settings']['file_extensions'])){
    $form['upload']['#upload_validators']['file_validate_extensions'][] = $mediafield_info['settings']['file_extensions'];
  }
  if(!$disabled){
    $form['default_values'] = array(
      '#type' => 'fieldset',
      '#title' => t('Default Values'),
      '#tree' => TRUE
    );
    
    //Create the node creation form to get all assigned fields and add them to the defaul value fieldset
    
    $allowed_fields = array_diff_key(field_info_instances('node', $nodetype), array($mediafield => NULL));
    
    $node = (object) array(
      'uid' => 1,
      'name' => '',
      'type' => $nodetype,
      'language' => LANGUAGE_NONE,
    );
    $nodeform = array();
    
    field_attach_form('node', $node, $nodeform, $form_state);
    
    //Delete Media field from default values
    $form['default_values'] = array_merge($form['default_values'], array_intersect_key($nodeform, $allowed_fields));
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate Nodes'),
    '#disabled' => $disabled,
  );
  return $form;
}


function mass_media_upload_upload_form_validate($form, &$form_state) {
}

function mass_media_upload_upload_form_submit($form, &$form_state){
  
  //Save the files
  
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  $saved_files = array();
  // We can't use file_save_upload() because of http://www.jacobsingh.name/content/tight-coupling-no-not
  foreach ($form_state['values']['upload'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      // Rename it to its original name, and put it in its final home.
      // Note - not using file_move here because if we call file_get_mime
      // (in file_uri_to_object) while it has a .tmp extension, it horks.

      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);

      $file = file_uri_to_object($destination);
      file_save($file);
      _media_save_file_permenently($file);

      $saved_files[] = $file;
    }
    else {
      // @todo: move this to element validate or something and clean up t().
      form_set_error('pud', "Upload of {$uploaded_file['name']} failed");
    }
  }
  
  //Prepare the batch process
  
  $batch = array(
    'title' => t('Generating Nodes'),
    'error_message' => t('Node generation has encountered an error.'),
    'finished' => 'mass_media_upload_batch_finished',
  );
  
  foreach ($saved_files as $file) {
    $batch['operations'][] = array('mass_media_upload_generate_node', array($file->fid, $form_state['values']['default_values']));
  }
  
  batch_set($batch);
}

function mass_media_upload_generate_node($fid, $default_values, &$context) {
  $file = file_load($fid);
  
  $node = new stdClass();
  $node->type = variable_get('mass_media_upload_nodetype','');
  node_object_prepare($node);
  
  $node->title    = $file->filename;
  $node->language = LANGUAGE_NONE;

  $media = array('fid' => $fid, 'title' => NULL, 'data' => NULL);
  $node->field_media['und'][0] = $media;

  foreach($default_values as $field => $value){
    $node->$field = $value;
  }
  
  node_save($node);
  $context['message'] = t('Importing: @filename', array('@filename' => $fid));
}

function mass_media_upload_batch_finished($success, $results, $operations) {
  drupal_set_message(t('Node generation completed'));
}

function mass_media_upload_admin($form, &$form_state) {
  $form = array();
  
  $nodetypes = array();
  foreach(node_type_get_types() as $type){
    $nodetypes[$type->type] = $type->name;
  }
  
  $form['mass_media_upload_nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Nodetype'),
    '#default_value' => variable_get('mass_media_upload_nodetype'),
    '#description' => t('Which Nodetype should be generated'),
    '#required' => TRUE,
    '#options' => $nodetypes,
    '#ajax' => array(
      'callback' => 'mass_media_upload_admin_ajax',
      'wrapper' => 'mediaelement-div',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  
  $form['mediafield-wrapper'] = array(
    '#prefix' => '<div id="mediaelement-div">',
    '#suffix' => '</div>'
  );
  
  if(isset($form_state['values']['mass_media_upload_nodetype'])){
    $nodetype = $form_state['values']['mass_media_upload_nodetype'];
  }else{
    $nodetype = variable_get('mass_media_upload_nodetype');
  }
  
  if($nodetype){
    
    $fields = field_info_instances('node', $nodetype);
    $mediafields = array();
    foreach($fields as $field){
      if($field['widget']['type'] == 'media_generic'){
        $mediafields[$field['field_name']] = $field['label'] . ' (' . $field['field_name'] . ')';
      }
    }
    
    if(count($mediafields) > 0){
      $form['mediafield-wrapper']['mass_media_upload_mediafield'] = array(
        '#type' => 'select',
        '#title' => t('Mediafield'),
        '#default_value' => variable_get('mass_media_upload_mediafield'),
        '#description' => t('Select the mediafield which should be filled with the uploaded files'),
        '#required' => TRUE,
        '#options' => $mediafields,
      );
    }else{
      $form['mediafield-wrapper']['mass_media_upload_mediafield_info'] = array(
        '#markup' => '<p>There are no mediafields assigned to nodetype <strong>' . $nodetype . '</strong></p>',
        
      );  
    }
  }

  return system_settings_form($form);
}

function mass_media_upload_admin_validate($form, &$form_state) {
  if($form_state['submitted']){
    if(!isset($form_state['values']['mass_media_upload_mediafield']) || $form_state['values']['mass_media_upload_mediafield'] == '') {
      form_set_error('', t('You must select a mediafield'));
    }
  }
}

function mass_media_upload_admin_ajax($form, $form_state) {
  return $form['mediafield-wrapper'];
}