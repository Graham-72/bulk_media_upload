<?php
function mass_media_upload_menu() {
  $items['massupload'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_media_upload_upload_form'),
    'access callback' => TRUE,
  );
  
  $items['admin/config/media/mass_media_upload'] = array(
    'title' => t('Mass Media Upload Settings'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mass_media_upload_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );
  
  return $items;
}

function mass_media_upload_upload_form($form, &$form_state) {
  
  $form['upload'] = array(
    '#type' => 'plupload',
    '#title' => t('Mass Media Upload'),
    '#description' => t(''),
    '#required' => TRUE,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate Nodes')
  );
  return $form;
}

function mass_media_upload_upload_form_validate($form, &$form_state) {
}

function mass_media_upload_upload_form_submit($form, &$form_state){
  $scheme = variable_get('file_default_scheme', 'public') . '://';
  $saved_files = array();
  // We can't use file_save_upload() because of http://www.jacobsingh.name/content/tight-coupling-no-not
  foreach ($form_state['values']['upload'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      $source = $uploaded_file['tmppath'];
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      // Rename it to its original name, and put it in its final home.
      // Note - not using file_move here because if we call file_get_mime
      // (in file_uri_to_object) while it has a .tmp extension, it horks.

      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);

      $file = file_uri_to_object($destination);
      file_save($file);
      _media_save_file_permenently($file);

      $saved_files[] = $file;
    }
    else {
      // @todo: move this to element validate or something and clean up t().
      form_set_error('pud', "Upload of {$uploaded_file['name']} failed");
    }
  }
  // Get a list of fids to pass back.
  //$fids = array();
  //foreach ($saved_files as $file) {
  //  $fids[] = $file->fid;
  //}
  //$form_state['redirect'] = array('media/browser', array('query' => array('render' => 'media-popup', 'fid' => $fids)));
  //dpm($fids);
  
  $batch = array(
    'title' => t('Generating Nodes'),
    'error_message' => t('Node generation has encountered an error.'),
    'finished' => 'mass_media_upload_batch_finished',
  );
  
  foreach ($saved_files as $file) {
    $batch['operations'][] = array('mass_media_upload_generate_node', array($file->fid));
  }
  batch_set($batch);
}

function mass_media_upload_generate_node($fid, &$context) {
  $file = file_load($fid);
  
  $node = new stdClass();
  $node->type = variable_get('mass_media_upload_nodetype','');
  node_object_prepare($node);
  
  $node->title    = $file->filename;
  $node->language = LANGUAGE_NONE;

  $media = array('fid' => $fid, 'title' => NULL, 'data' => NULL);
  $node->field_media['und'][0] = $media;
  
  node_save($node);
  $context['message'] = t('Importing: @filename', array('@filename' => $fid));
}

function mass_media_upload_batch_finished($success, $results, $operations) {
  drupal_set_message(t('Node generation completed'));
}

function mass_media_upload_admin() {
  $form = array();
  
  $nodetypes = array();
  foreach(node_type_get_types() as $nodetype){
    $nodetypes[$nodetype->type] = $nodetype->name;
  }
  
  $form['mass_media_upload_nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Nodetype'),
    '#default_value' => variable_get('mass_media_upload_nodetype'),
    '#description' => t('Which Nodetype should be generated'),
    '#required' => TRUE,
    '#options' => $nodetypes
  );

  return system_settings_form($form);
}